name: GitHub Project Monitor

on:
  schedule:
    # 每 1 分鐘執行一次
    - cron: '* * * * *'
  workflow_dispatch:
    # 支援手動觸發
    inputs:
      force_run:
        description: '強制執行（即使沒有新任務）'
        required: false
        default: 'false'
        type: boolean

jobs:
  check-project-items:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      id-token: write

    outputs:
      has_tasks: ${{ steps.process_items.outputs.has_tasks }}
      task_count: ${{ steps.process_items.outputs.task_count }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv

      - name: Download previous processed items
        uses: actions/download-artifact@v4
        with:
          name: processed-items
          path: ./
        continue-on-error: true

      - name: Process Project Items
        id: process_items
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          cd scripts
          python process_project_items.py

      - name: Upload processed items state
        uses: actions/upload-artifact@v4
        with:
          name: processed-items
          path: scripts/processed_items.json
          retention-days: 30
        if: always()

      - name: Upload task file
        uses: actions/upload-artifact@v4
        with:
          name: claude-tasks-${{ github.run_number }}
          path: scripts/claude_tasks.txt
          retention-days: 7
        if: steps.process_items.outputs.has_tasks == 'true'

  process-with-claude:
    needs: check-project-items
    if: needs.check-project-items.outputs.has_tasks == 'true' || github.event.inputs.force_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 需要完整歷史記錄以便 commit

      - name: Download task file
        uses: actions/download-artifact@v4
        with:
          name: claude-tasks-${{ github.run_number }}
          path: ./

      - name: Read task content
        id: read_tasks
        run: |
          if [ -f claude_tasks.txt ]; then
            # 讀取檔案內容並設定為 output
            {
              echo "content<<EOF"
              cat claude_tasks.txt
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          else
            echo "content=No tasks found" >> "$GITHUB_OUTPUT"
          fi

      - name: Display tasks to be processed
        run: |
          echo "📋 即將處理的任務："
          echo "任務數量: ${{ needs.check-project-items.outputs.task_count }}"
          echo ""
          if [ -f claude_tasks.txt ]; then
            echo "任務內容預覽："
            head -20 claude_tasks.txt
            if [ $(wc -l < claude_tasks.txt) -gt 20 ]; then
              echo "..."
              echo "（內容已截斷，完整內容將傳送給 Claude）"
            fi
          fi

      - name: Process tasks with Claude Code
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # 直接傳遞任務內容作為 prompt
          prompt: |
            這些是來自 GitHub Project 的新任務，請按照任務內容執行相應的開發工作：

            ${{ steps.read_tasks.outputs.content }}

            完成每個任務後，請確保：
            1. 程式碼符合專案的編碼標準
            2. 如果是 Flutter 專案，請使用 fvm flutter 指令
            3. 執行相關的測試（如果有的話）
            4. 完成後請 commit 變更

          # 允許執行常用的開發指令
          allowed_tools: |
            Bash(fvm flutter *),
            Bash(flutter *),
            Bash(dart *),
            Bash(npm *),
            Bash(git add *),
            Bash(git commit *),
            Bash(git push *),
            Bash(python *),
            Bash(pip *),
            Bash(pytest *),
            Bash(ruff *),
            Bash(black *)

      - name: Notify completion
        if: always()
        run: |
          echo "🎉 Claude 任務處理完成"
          echo "處理狀態: ${{ job.status }}"
          echo "處理時間: $(date)"

  cleanup-old-artifacts:
    needs: [check-project-items, process-with-claude]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
      - name: Cleanup old task artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            // 清理超過 7 天的 claude-tasks artifacts
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('claude-tasks-') && 
                  new Date(artifact.created_at) < sevenDaysAgo) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id,
                  });
                  console.log(`已清理舊的任務 artifact: ${artifact.name}`);
                } catch (error) {
                  console.log(`清理 artifact ${artifact.name} 時發生錯誤:`, error.message);
                }
              }
            }