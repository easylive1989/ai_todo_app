#!/usr/bin/env python3
"""
GitHub Project Item Áõ£ËÅΩÂô®
ÊåÅÁ∫åÁõ£ËÅΩ easylive1989/ai_todo_app ÁöÑ GitHub Project #5 ÊòØÂê¶ÊúâÊñ∞ÁöÑ Item Ë¢´ÂâµÂª∫
"""

import os
import time
import subprocess
from datetime import datetime
from typing import Set, Dict, Any
import requests
from dotenv import load_dotenv

# ËºâÂÖ•Áí∞Â¢ÉËÆäÊï∏
load_dotenv()


class GitHubProjectMonitor:
    def __init__(self, owner: str, repo: str, project_number: int, token: str = None):
        """
        ÂàùÂßãÂåñ GitHub Project Áõ£ËÅΩÂô®
        
        Args:
            owner: GitHub ÁµÑÁπîÊàñÁî®Êà∂Âêç (easylive1989)
            repo: ÂÑ≤Â≠òÂ∫´ÂêçÁ®± (ai_todo_app)
            project_number: Project Á∑®Ëôü (5)
            token: GitHub Personal Access Token
        """
        self.owner = owner
        self.repo = repo
        self.project_number = project_number
        self.token = token or os.getenv('GITHUB_TOKEN')
        
        if not self.token:
            raise ValueError("GitHub token ÂøÖÈ†àË®≠ÁΩÆÂú® .env Ê™îÊ°àÁöÑ GITHUB_TOKEN Áí∞Â¢ÉËÆäÊï∏‰∏≠")
        
        self.headers = {
            'Authorization': f'Bearer {self.token}',
            'Accept': 'application/vnd.github.v3+json',
            'X-GitHub-Api-Version': '2022-11-28'
        }
        
        # GraphQL API endpoint
        self.graphql_url = 'https://api.github.com/graphql'
        
        # ÂÑ≤Â≠òÂ∑≤Áü•ÁöÑ item IDs
        self.known_items: Set[str] = set()
        self.first_run = True
        
        # Claude Code CLI Ë®≠ÂÆö
        self.claude_cli = os.getenv('CLAUDE_CLI_PATH', 'claude')
        self.project_dir = os.getenv('PROJECT_DIR', os.getcwd())
        
        # Claude Code CLI ÊòØÂê¶Ë¶ÅÊ±Ç commit
        self.request_commit = os.getenv('REQUEST_COMMIT', 'true').lower() == 'true'
        
        # Discord webhook URL
        self.discord_webhook_url = 'https://discord.com/api/webhooks/1404465505888108664/GBq0HXWkrAOwGPE2yEprpZxiAbj6D3oaHs9qQTSSYNhDXLrS06CS2HErQojYj1nE8ozt'
        
        # Project Ê¨Ñ‰ΩçË≥áË®äÔºàÂ∞áÂú®ÂàùÂßãÂåñÊôÇÁç≤ÂèñÔºâ
        self.project_id = None
        self.status_field_id = None
        self.review_option_id = None
        self.backlog_option_id = None
        
        # ÂàùÂßãÂåñÊôÇÁç≤Âèñ Project Ê¨Ñ‰ΩçË≥áË®ä
        self._initialize_project_fields()
    
    def _initialize_project_fields(self):
        """
        ÂàùÂßãÂåñ Project Ê¨Ñ‰ΩçË≥áË®äÔºåÁç≤Âèñ Status Ê¨Ñ‰ΩçÂíåÂêÑÁãÄÊÖãÈÅ∏È†ÖÁöÑ ID
        """
        try:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üîÑ Ê≠£Âú®Áç≤Âèñ Project Ê¨Ñ‰ΩçË≥áË®ä...")
            
            query = """
            query($owner: String!, $repo: String!, $projectNumber: Int!) {
              repository(owner: $owner, name: $repo) {
                projectV2(number: $projectNumber) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }
            """
            
            variables = {
                'owner': self.owner,
                'repo': self.repo,
                'projectNumber': self.project_number
            }
            
            response = requests.post(
                self.graphql_url,
                headers=self.headers,
                json={'query': query, 'variables': variables}
            )
            
            if response.status_code != 200:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ö†Ô∏è ÁÑ°Ê≥ïÁç≤Âèñ Project Ê¨Ñ‰ΩçË≥áË®ä: {response.status_code}")
                return
            
            data = response.json()
            
            if 'errors' in data:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ö†Ô∏è Áç≤ÂèñÊ¨Ñ‰ΩçË≥áË®äÊôÇÁôºÁîüÈåØË™§: {data['errors']}")
                return
            
            project = data.get('data', {}).get('repository', {}).get('projectV2', {})
            self.project_id = project.get('id')
            
            # Â∞ãÊâæ Status Ê¨Ñ‰ΩçÂíåÈÅ∏È†Ö
            for field in project.get('fields', {}).get('nodes', []):
                if field and field.get('name') == 'Status':
                    self.status_field_id = field.get('id')
                    options = field.get('options', [])
                    for option in options:
                        if option.get('name') == 'Review':
                            self.review_option_id = option.get('id')
                        elif option.get('name') == 'Backlog':
                            self.backlog_option_id = option.get('id')
            
            if self.project_id and self.status_field_id and self.review_option_id and self.backlog_option_id:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚úÖ ÊàêÂäüÁç≤Âèñ Project Ê¨Ñ‰ΩçË≥áË®ä")
                print(f"   üìã Project ID: {self.project_id[:10]}...")
                print(f"   üìä Status Field ID: {self.status_field_id[:10]}...")
                print(f"   üîç Review Option ID: {self.review_option_id[:10]}...")
                print(f"   üìù Backlog Option ID: {self.backlog_option_id[:10]}...")
            else:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ö†Ô∏è ÁÑ°Ê≥ïÊâæÂà∞ Status Ê¨Ñ‰ΩçÊàñÂøÖË¶ÅÁöÑÈÅ∏È†Ö (Review/Backlog)")
                
        except Exception as e:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå ÂàùÂßãÂåñ Project Ê¨Ñ‰ΩçÊôÇÁôºÁîüÈåØË™§: {str(e)}")
    
    def update_item_status(self, item_id: str, status: str = 'Review') -> bool:
        """
        Êõ¥Êñ∞ Project Item ÁöÑÁãÄÊÖã
        
        Args:
            item_id: Project Item ÁöÑ ID
            status: Ë¶ÅË®≠ÂÆöÁöÑÁãÄÊÖãÔºàÈ†êË®≠ÁÇ∫ 'Review'Ôºâ
        
        Returns:
            bool: Êõ¥Êñ∞ÊòØÂê¶ÊàêÂäü
        """
        if not all([self.project_id, self.status_field_id, self.review_option_id]):
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ö†Ô∏è Áº∫Â∞ëÂøÖË¶ÅÁöÑ Project Ê¨Ñ‰ΩçË≥áË®äÔºåÁÑ°Ê≥ïÊõ¥Êñ∞ÁãÄÊÖã")
            return False
        
        try:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üìù Ê≠£Âú®Êõ¥Êñ∞ Item ÁãÄÊÖãÁÇ∫ {status}...")
            
            mutation = """
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }
              ) {
                projectV2Item {
                  id
                }
              }
            }
            """
            
            variables = {
                'projectId': self.project_id,
                'itemId': item_id,
                'fieldId': self.status_field_id,
                'optionId': self.review_option_id
            }
            
            response = requests.post(
                self.graphql_url,
                headers=self.headers,
                json={'query': mutation, 'variables': variables}
            )
            
            if response.status_code != 200:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå Êõ¥Êñ∞ÁãÄÊÖãÂ§±Êïó: {response.status_code}")
                return False
            
            data = response.json()
            
            if 'errors' in data:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå Êõ¥Êñ∞ÁãÄÊÖãÊôÇÁôºÁîüÈåØË™§: {data['errors']}")
                return False
            
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚úÖ ÊàêÂäüÂ∞á Item ÁãÄÊÖãÊõ¥Êñ∞ÁÇ∫ {status}")
            return True
            
        except Exception as e:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå Êõ¥Êñ∞ÁãÄÊÖãÊôÇÁôºÁîüÈåØË™§: {str(e)}")
            return False
    
    def get_project_items(self) -> Dict[str, Any]:
        """
        ÈÄèÈÅé GraphQL API Áç≤Âèñ Project ÁöÑÊâÄÊúâ Items
        """
        query = """
        query($owner: String!, $repo: String!, $projectNumber: Int!) {
          repository(owner: $owner, name: $repo) {
            projectV2(number: $projectNumber) {
              title
              items(first: 100) {
                nodes {
                  id
                  createdAt
                  updatedAt
                  content {
                    ... on Issue {
                      title
                      number
                      state
                      url
                    }
                    ... on PullRequest {
                      title
                      number
                      state
                      url
                    }
                    ... on DraftIssue {
                      title
                      body
                    }
                  }
                  fieldValues(first: 10) {
                    nodes {
                      ... on ProjectV2ItemFieldTextValue {
                        text
                        field {
                          ... on ProjectV2Field {
                            name
                          }
                        }
                      }
                      ... on ProjectV2ItemFieldSingleSelectValue {
                        name
                        optionId
                        field {
                          ... on ProjectV2SingleSelectField {
                            name
                          }
                        }
                      }
                    }
                  }
                }
                totalCount
              }
            }
          }
        }
        """
        
        variables = {
            'owner': self.owner,
            'repo': self.repo,
            'projectNumber': self.project_number
        }
        
        response = requests.post(
            self.graphql_url,
            headers=self.headers,
            json={'query': query, 'variables': variables}
        )
        
        if response.status_code != 200:
            raise Exception(f"GraphQL query failed: {response.status_code} - {response.text}")
        
        data = response.json()
        
        if 'errors' in data:
            raise Exception(f"GraphQL errors: {data['errors']}")
        
        return data.get('data', {}).get('repository', {}).get('projectV2', {})
    
    def _is_item_in_backlog(self, item: Dict[str, Any]) -> bool:
        """
        Ê™¢Êü• item ÊòØÂê¶ËôïÊñº Backlog ÁãÄÊÖã
        
        Args:
            item: Project Item Êï∏Êìö
        
        Returns:
            bool: ÊòØÂê¶ÁÇ∫ Backlog ÁãÄÊÖã
        """
        if not self.backlog_option_id:
            # Â¶ÇÊûúÊ≤íÊúâ Backlog IDÔºåÈ†êË®≠ÂÖÅË®±ÊâÄÊúâ itemÔºàÂêëÂæåÁõ∏ÂÆπÔºâ
            return True
        
        field_values = item.get('fieldValues', {}).get('nodes', [])
        for field in field_values:
            if field and field.get('field', {}).get('name') == 'Status':
                # Ê™¢Êü•ÈÅ∏È†Ö ID ÊòØÂê¶ÂåπÈÖç
                option_id = field.get('optionId')
                return option_id == self.backlog_option_id
        
        # Â¶ÇÊûúÊ≤íÊúâÊâæÂà∞ÁãÄÊÖãÊ¨Ñ‰ΩçÔºåÈ†êË®≠ÁÇ∫ TrueÔºàÂèØËÉΩÊòØÊñ∞ÂâµÂª∫ÁöÑ itemÔºâ
        return True
    
    def check_for_new_items(self):
        """
        Ê™¢Êü•ÊòØÂê¶ÊúâÊñ∞ÁöÑ Items Ë¢´ÂâµÂª∫
        """
        try:
            project_data = self.get_project_items()
            
            if not project_data:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå ÁÑ°Ê≥ïÁç≤Âèñ Project Êï∏Êìö")
                return
            
            items = project_data.get('items', {}).get('nodes', [])
            current_items = {item['id']: item for item in items if item}
            
            # Á¨¨‰∏ÄÊ¨°Âü∑Ë°åÊôÇÔºåË®òÈåÑÊâÄÊúâÁèæÊúâÁöÑ items
            if self.first_run:
                self.known_items = set(current_items.keys())
                project_title = project_data.get('title', 'Unknown')
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üöÄ ÈñãÂßãÁõ£ËÅΩ Project: {project_title}")
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üìä ÁõÆÂâçÊúâ {len(self.known_items)} ÂÄã items")
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üéØ Âè™Áõ£ËÅΩ Backlog ÁãÄÊÖãÁöÑÊñ∞‰ªªÂãô")
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚è∞ ÊØè 60 ÁßíÊ™¢Êü•‰∏ÄÊ¨°Êñ∞ÁöÑ items")
                print("-" * 50)
                self.first_run = False
                return
            
            # Ê™¢Êü•Êñ∞ÁöÑ items
            new_item_ids = set(current_items.keys()) - self.known_items
            
            # ÈÅéÊøæÂá∫Âè™Êúâ Backlog ÁãÄÊÖãÁöÑÊñ∞ items
            backlog_new_items = []
            for item_id in new_item_ids:
                item = current_items[item_id]
                if self._is_item_in_backlog(item):
                    backlog_new_items.append(item_id)
            
            if backlog_new_items:
                print(f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üÜï ÁôºÁèæ {len(backlog_new_items)} ÂÄãÊñ∞ÁöÑ Backlog Item!")
                if len(new_item_ids) > len(backlog_new_items):
                    print(f"   ‚ÑπÔ∏è ÔºàÂøΩÁï•‰∫Ü {len(new_item_ids) - len(backlog_new_items)} ÂÄãÈùû Backlog ÁãÄÊÖãÁöÑ itemsÔºâ")
                print("=" * 50)
                
                for item_id in backlog_new_items:
                    item = current_items[item_id]
                    content = item.get('content', {})
                    
                    if content:
                        # Âà§Êñ∑ item È°ûÂûã
                        if 'number' in content:
                            item_type = 'Issue' if 'pull_request' not in content.get('url', '') else 'Pull Request'
                        else:
                            item_type = 'Draft Issue'
                        
                        title = content.get('title', 'No title')
                        
                        print(f"\nüìå Êñ∞ {item_type}: {title}")
                        
                        if 'number' in content:
                            print(f"   üî¢ Á∑®Ëôü: #{content.get('number')}")
                            print(f"   üìà ÁãÄÊÖã: {content.get('state', 'unknown')}")
                            print(f"   üîó URL: {content.get('url', 'N/A')}")
                        
                        if 'body' in content and content.get('body'):
                            body_preview = content.get('body', '')[:150]
                            print(f"   üìù ÂÖßÂÆπÈ†êË¶Ω: {body_preview}...")
                        
                        # È°ØÁ§∫Ëá™ÂÆöÁæ©Â≠óÊÆµ
                        field_values = item.get('fieldValues', {}).get('nodes', [])
                        custom_fields = []
                        for field in field_values:
                            if field:
                                field_name = field.get('field', {}).get('name', '')
                                field_value = field.get('text') or field.get('name', '')
                                if field_name and field_value:
                                    custom_fields.append(f"{field_name}: {field_value}")
                        
                        if custom_fields:
                            print("   üè∑Ô∏è  Ëá™ÂÆöÁæ©Â≠óÊÆµ:")
                            for field_info in custom_fields:
                                print(f"      - {field_info}")
                        
                        print(f"   üìÖ ÂâµÂª∫ÊôÇÈñì: {item.get('createdAt', 'Unknown')}")
                        print("-" * 30)
                        
                        # Âü∑Ë°å Claude Code CLI
                        task_content = self.extract_task_content(item)
                        if task_content and task_content != "ÁÑ°Ê≥ïÊèêÂèñ‰ªªÂãôÂÖßÂÆπ":
                            print(f"\nüöÄ ÈñãÂßãÂü∑Ë°å‰ªªÂãô...")
                            
                            # Âü∑Ë°å Claude Code (ÂåÖÂê´Ëá™Âãï commit/push Âíå Discord ÈÄöÁü•)
                            claude_success = self.run_claude_cli(task_content, item_id, item)
                            
                            if claude_success:
                                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üéâ ‰ªªÂãôÂü∑Ë°åÂÆåÊàê")
                            else:
                                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üòû ‰ªªÂãôÂü∑Ë°åÂ§±Êïó")
                        else:
                            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ö†Ô∏è ÁÑ°Ê≥ïÊèêÂèñÊúâÊïàÁöÑ‰ªªÂãôÂÖßÂÆπÔºåË∑≥ÈÅéÂü∑Ë°å")
                
                # Êõ¥Êñ∞Â∑≤Áü•ÁöÑ itemsÔºàÂåÖÊã¨ÊâÄÊúâÊñ∞ itemsÔºå‰∏çÂè™ÊòØ BacklogÔºâ
                self.known_items.update(new_item_ids)
                print("=" * 50)
            else:
                # Á∞°ÊΩîÁöÑÁãÄÊÖãÈ°ØÁ§∫
                if new_item_ids:
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ ÁôºÁèæ {len(new_item_ids)} ÂÄãÊñ∞ itemsÔºå‰ΩÜÈÉΩ‰∏çÊòØ Backlog ÁãÄÊÖã")
                else:
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ ÁÑ°Êñ∞ items (ÂÖ± {len(current_items)} ÂÄã)")
        
        except Exception as e:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå ÈåØË™§: {str(e)}")
    
    def send_discord_notification(self, item: Dict[str, Any], success: bool, execution_time: str = None, status_updated: bool = False):
        """
        ÁôºÈÄÅ Discord ÈÄöÁü•
        
        Args:
            item: Project Item Êï∏Êìö
            success: Âü∑Ë°åÊòØÂê¶ÊàêÂäü
            execution_time: Âü∑Ë°åÊôÇÈñìÔºàÂèØÈÅ∏Ôºâ
            status_updated: ÁãÄÊÖãÊòØÂê¶Â∑≤Êõ¥Êñ∞ÁÇ∫ Review
        """
        try:
            content = item.get('content', {})
            title = content.get('title', 'ÁÑ°Ê®ôÈ°å')
            item_type = 'Issue'
            
            if content:
                if 'number' in content:
                    item_type = 'Issue' if 'pull_request' not in content.get('url', '') else 'Pull Request'
                else:
                    item_type = 'Draft Issue'
            
            # Âª∫Á´ã Discord Embed
            embed_title = f"‚úÖ ‰ªªÂãôÂü∑Ë°å{'ÊàêÂäü' if success else 'Â§±Êïó'}"
            if success and status_updated:
                embed_title += " (ÁãÄÊÖãÂ∑≤Êõ¥Êñ∞ÁÇ∫ Review)"
            
            embed = {
                "title": embed_title,
                "description": f"**{item_type}:** {title}",
                "color": 0x00ff00 if success else 0xff0000,  # Á∂†Ëâ≤(ÊàêÂäü) Êàñ Á¥ÖËâ≤(Â§±Êïó)
                "fields": [],
                "timestamp": datetime.utcnow().isoformat(),
                "footer": {
                    "text": f"GitHub Project Monitor - {self.owner}/{self.repo}"
                }
            }
            
            # Âä†ÂÖ•È°çÂ§ñË≥áË®ä
            if 'number' in content:
                embed["fields"].append({
                    "name": "Á∑®Ëôü",
                    "value": f"#{content.get('number')}",
                    "inline": True
                })
                embed["fields"].append({
                    "name": "ÁãÄÊÖã",
                    "value": content.get('state', 'unknown'),
                    "inline": True
                })
                if content.get('url'):
                    embed["fields"].append({
                        "name": "ÈÄ£Áµê",
                        "value": f"[Êü•Áúã {item_type}]({content.get('url')})",
                        "inline": False
                    })
            
            if execution_time:
                embed["fields"].append({
                    "name": "Âü∑Ë°åÊôÇÈñì",
                    "value": execution_time,
                    "inline": True
                })
            
            # Â¶ÇÊûúÁãÄÊÖãÂ∑≤Êõ¥Êñ∞
            if success and status_updated:
                embed["fields"].append({
                    "name": "Project ÁãÄÊÖã",
                    "value": "üîç Â∑≤Êõ¥Êñ∞ÁÇ∫ Review",
                    "inline": True
                })
            
            # Â¶ÇÊûúÊúâ bodyÔºåÂä†ÂÖ•È†êË¶Ω
            if 'body' in content and content.get('body'):
                body_preview = content.get('body', '')[:200]
                embed["fields"].append({
                    "name": "ÂÖßÂÆπÈ†êË¶Ω",
                    "value": f"{body_preview}{'...' if len(content.get('body', '')) > 200 else ''}",
                    "inline": False
                })
            
            # Ê∫ñÂÇô Discord webhook payload
            payload = {
                "embeds": [embed],
                "username": "GitHub Project Monitor",
                "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            }
            
            # ÁôºÈÄÅÂà∞ Discord
            response = requests.post(
                self.discord_webhook_url,
                json=payload,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code in [200, 204]:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üì® Discord ÈÄöÁü•Â∑≤ÁôºÈÄÅ")
            else:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ö†Ô∏è Discord ÈÄöÁü•ÁôºÈÄÅÂ§±Êïó: {response.status_code}")
                
        except Exception as e:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå ÁôºÈÄÅ Discord ÈÄöÁü•ÊôÇÁôºÁîüÈåØË™§: {str(e)}")
    
    def run_claude_cli(self, prompt: str, item_id: str, item: Dict[str, Any] = None) -> bool:
        """
        Âü∑Ë°å Claude Code CLI
        
        Args:
            prompt: Ë¶ÅÂü∑Ë°åÁöÑÊèêÁ§∫Ë©û/‰ªªÂãôÂÖßÂÆπ
            item_id: Item ID Áî®Êñº log
            item: Project Item Êï∏ÊìöÔºàÁî®ÊñºÁôºÈÄÅÈÄöÁü•Ôºâ
        
        Returns:
            bool: Âü∑Ë°åÊòØÂê¶ÊàêÂäü
        """
        start_time = datetime.now()
        try:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ü§ñ ÂïüÂãï Claude Code CLI...")
            print(f"   üìù Âü∑Ë°åÂÖßÂÆπ: {prompt[:100]}{'...' if len(prompt) > 100 else ''}")
            
            # ÂàáÊèõÂà∞Â∞àÊ°àÁõÆÈåÑ
            original_dir = os.getcwd()
            os.chdir(self.project_dir)
            
            # Â¶ÇÊûúÈúÄË¶Å commitÔºåÂú®ÊèêÁ§∫Ë©û‰∏≠Âä†ÂÖ• commit Êåá‰ª§
            full_prompt = prompt
            if self.request_commit:
                full_prompt = f"{prompt}\n\nÂÆåÊàêÂæåË´ãËá™Âãï commit ‰∏¶ push ËÆäÊõ¥Âà∞ Git ÂÄâÂ∫´„ÄÇ"
            
            # Âª∫Á´ã Claude CLI Êåá‰ª§
            cmd = [self.claude_cli, '--dangerously-skip-permissions', full_prompt]
            
            # Âü∑Ë°å Claude CLI
            process = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=600  # 10 ÂàÜÈêòË∂ÖÊôÇÔºàÁµ¶ commit/push Êõ¥Â§öÊôÇÈñìÔºâ
            )
            
            # ÂõûÂà∞ÂéüÁõÆÈåÑ
            os.chdir(original_dir)
            
            # Ë®àÁÆóÂü∑Ë°åÊôÇÈñì
            execution_time = str(datetime.now() - start_time).split('.')[0]
            
            if process.returncode == 0:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚úÖ Claude Code Âü∑Ë°åÊàêÂäü")
                if process.stdout:
                    print(f"   üì§ Ëº∏Âá∫: {process.stdout.strip()[:200]}{'...' if len(process.stdout.strip()) > 200 else ''}")
                
                # Êõ¥Êñ∞ Project Item ÁãÄÊÖãÁÇ∫ Review
                status_updated = False
                if item_id:
                    status_updated = self.update_item_status(item_id)
                    if not status_updated:
                        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ö†Ô∏è ÁÑ°Ê≥ïÊõ¥Êñ∞ Item ÁãÄÊÖã")
                
                # ÁôºÈÄÅ Discord ÈÄöÁü•ÔºàÊàêÂäüÔºâ
                if item:
                    self.send_discord_notification(item, success=True, execution_time=execution_time, status_updated=status_updated)
                
                return True
            else:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå Claude Code Âü∑Ë°åÂ§±Êïó (exit code: {process.returncode})")
                if process.stderr:
                    print(f"   üì• ÈåØË™§: {process.stderr.strip()}")
                
                # ÁôºÈÄÅ Discord ÈÄöÁü•ÔºàÂ§±ÊïóÔºâ
                if item:
                    self.send_discord_notification(item, success=False, execution_time=execution_time)
                
                return False
                
        except subprocess.TimeoutExpired:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚è∞ Claude Code Âü∑Ë°åË∂ÖÊôÇ")
            
            # ÁôºÈÄÅ Discord ÈÄöÁü•ÔºàË∂ÖÊôÇ/Â§±ÊïóÔºâ
            if item:
                execution_time = "Ë∂ÖÈÅé 10 ÂàÜÈêòÔºàË∂ÖÊôÇÔºâ"
                self.send_discord_notification(item, success=False, execution_time=execution_time)
            
            return False
        except Exception as e:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå Âü∑Ë°å Claude Code ÊôÇÁôºÁîüÈåØË™§: {str(e)}")
            
            # ÁôºÈÄÅ Discord ÈÄöÁü•ÔºàÈåØË™§/Â§±ÊïóÔºâ
            if item:
                self.send_discord_notification(item, success=False, execution_time="Âü∑Ë°åÊôÇÁôºÁîüÈåØË™§")
            
            return False
    
    
    def extract_task_content(self, item: Dict[str, Any]) -> str:
        """
        ÊèêÂèñ Item ÁöÑ‰ªªÂãôÂÖßÂÆπ
        
        Args:
            item: Project Item Êï∏Êìö
        
        Returns:
            str: ‰ªªÂãôÂÖßÂÆπ
        """
        content = item.get('content', {})
        
        # ÂÑ™ÂÖà‰ΩøÁî® title
        title = content.get('title', '')
        
        # Â¶ÇÊûúÊúâ body ÂÖßÂÆπÔºå‰πüÂä†ÂÖ•
        body = content.get('body', '')
        
        # ÁµÑÂêà‰ªªÂãôÂÖßÂÆπ
        if title and body:
            return f"{title}\n\n{body}"
        elif title:
            return title
        elif body:
            return body
        else:
            return "ÁÑ°Ê≥ïÊèêÂèñ‰ªªÂãôÂÖßÂÆπ"
    
    def start_monitoring(self, interval: int = 60):
        """
        ÈñãÂßãÁõ£ËÅΩ Project
        
        Args:
            interval: Ê™¢Êü•ÈñìÈöîÔºàÁßíÔºâ
        """
        print("üîç GitHub Project Áõ£ËÅΩÂô®")
        print(f"üìÇ Repository: {self.owner}/{self.repo}")
        print(f"üìã Project: #{self.project_number}")
        print(f"‚è±Ô∏è  Ê™¢Êü•ÈñìÈöî: {interval} Áßí")
        print("‚ùå Êåâ Ctrl+C ÂÅúÊ≠¢Áõ£ËÅΩ")
        print("=" * 50)
        
        try:
            while True:
                self.check_for_new_items()
                time.sleep(interval)
        except KeyboardInterrupt:
            print(f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üõë Áõ£ËÅΩÂ∑≤ÂÅúÊ≠¢")
            print("üëã ÂÜçË¶ãÔºÅ")


def main():
    """
    ‰∏ªÂáΩÊï∏ - ÈÖçÁΩÆÁÇ∫Áõ£ËÅΩ easylive1989/ai_todo_app ÁöÑ Project #5
    """
    # Âõ∫ÂÆöÈÖçÁΩÆ
    owner = 'easylive1989'
    repo = 'ai_todo_app'
    project_number = 5
    check_interval = 60
    
    try:
        # ÂâµÂª∫Áõ£ËÅΩÂô®ÂØ¶‰æã
        monitor = GitHubProjectMonitor(
            owner=owner,
            repo=repo,
            project_number=project_number
        )
        
        # ÈñãÂßãÁõ£ËÅΩ
        monitor.start_monitoring(interval=check_interval)
        
    except ValueError as e:
        print(f"‚ùå ÈÖçÁΩÆÈåØË™§: {e}")
        print("üí° Ë´ãÁ¢∫Ë™ç .env Ê™îÊ°à‰∏≠ÊúâË®≠ÁΩÆ GITHUB_TOKEN")
    except Exception as e:
        print(f"‚ùå Âü∑Ë°åÈåØË™§: {e}")


if __name__ == '__main__':
    main()